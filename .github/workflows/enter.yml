name: Process Sign up Discussion Messages

on:
  discussion:
    types: [created]
  workflow_dispatch:

jobs:
  process-messages:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_PROJECT_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
      REPO: AdHoc-Protocol
    steps:
      - name: Get the discussion category ID for "Sign up"
        id: fetch_category_id
        run: |
          curl -L -v \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_PROJECT_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/AdHoc-Protocol/projects
                    
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategories(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          ' -F owner="$REPO" -F name="$REPO" | jq -r '.data.repository.discussionCategories.nodes[] | select(.name == "Sign up") | .id')
          
          echo "Fetched Category ID: $CATEGORY_ID"

      - name: Get discussion messages in "Sign up" category
        id: fetch_discussions
        run: |          
          MESSAGES=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                    createdAt
                    id
                  }
                }
              }
            }
          ' -F owner="$REPO" -F name="$REPO" -F categoryId="$CATEGORY_ID")
          
          echo "$MESSAGES" > messages.json
          cat messages.json
      
      - name: Collect unique messages
        run: |
          # Parse the messages.json file and remove duplicates
          jq -r '.data.repository.discussions.nodes 
          | unique_by(.author.login) 
          | .[] 
          | "\(.author.login), \(.author.url), \(.author.avatarUrl), \(.id)"' messages.json > unique_messages.txt
          cat unique_messages.txt
      
      - name: Handle response
        if: success()
        run: |
          # Delete processed messages
          jq -r '.data.repository.discussions.nodes | .[] | .id' messages.json | while read id; do
            gh api graphql -f query='
              mutation($id: ID!) {
                deleteDiscussion(input: {id: $id}) {
                  clientMutationId
                }
              }
            ' -F id="$id"
          done

      - name: Create author-specific project      
        run: |
          while IFS=, read -r author url avatar_url id; do
            echo "Checking projects for author: $author"
            
            # Run the GraphQL query to check if the project exists for the author
            RESULT=$(gh api graphql -f query='
              query($owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  projects(first: 100) {
                    nodes {
                      name
                    }
                  }
                }
              }
            ' -F owner="$REPO" -F name="$REPO")
            
            # Output the result of the query
            echo "Result for $author:"
            echo "$RESULT"
            
          done < unique_messages.txt

