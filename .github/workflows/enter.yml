name: Process Sign up Discussion Messages

on:
  discussion:
    types: [created]
  workflow_dispatch:

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_PROJECT_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
      REPO: AdHoc-Protocol
      ORG: AdHoc-Protocol

jobs:
  process-messages:
    runs-on: ubuntu-latest
    steps:
      - name: Get the discussion category ID for "Sign up"
        id: fetch_category_id
        run: |
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategories(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" | jq -r '.data.repository.discussionCategories.nodes[] | select(.name == "Sign up") | .id')

          if [[ -z "$CATEGORY_ID" ]]; then
            echo "Category ID not found for 'Sign up'"
            exit 1
          fi
          echo "Fetched Category ID: $CATEGORY_ID"

      - name: Collect discussion messages in "Sign up" category
        id: fetch_discussions
        run: |
          MESSAGES=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                    createdAt
                    id
                  }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categoryId="$CATEGORY_ID")

          echo "$MESSAGES" > messages.json
          echo "Collected messages in 'Sign up' category."
          cat messages.json

      - name: Collect unique messages
        run: |
          # Parse the messages.json file and remove duplicates
          jq -r '.data.repository.discussions.nodes 
          | unique_by(.author.login) 
          | .[] 
          | "\(.author.login), \(.author.url), \(.author.avatarUrl), \(.id)"' messages.json > unique_messages.txt
          
          echo "Collected and processed unique messages in 'Sign up' category."
          cat unique_messages.txt

      - name: Delete processed messages
        if: success()
        run: |
          jq -r '.data.repository.discussions.nodes | .[] | .id' messages.json | while read id; do
            gh api graphql -f query='
              mutation($id: ID!) {
                deleteDiscussion(input: {id: $id}) {
                  clientMutationId
                }
              }
            ' -F id="$id"
          done

      - name: Iterate Over Unique Messages
        run: |
          ORG_ID=$(gh api graphql -f query='
            query($organization: String!) {
              organization(login: $organization) {
                id
              }
            }
          ' -F organization="$ORG" | jq -r '.data.organization.id')

          while IFS=',' read -r login url avatarUrl id; do
            # Check if a project with title "$login" exists in the organization
            PROJECT_EXISTS=$(gh api graphql -f query='
              query($organization: String!, $login: String!) {
                organization(login: $organization) {
                  projectsV2(first: 100, query: $login) {
                    totalCount
                  }
                }
              }
            ' -F organization="$ORG" -F login="$login" | jq -r '.data.organization.projectsV2.totalCount')

            if [[ "$PROJECT_EXISTS" == "0" ]]; then
              echo "Creating new project for $login..."
              NEW_PROJECT_ID=$(gh api graphql -f query='
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {ownerId: $ownerId, title: $title}) {
                    projectV2 {
                      id
                    }
                  }
                }
              ' -F ownerId="$ORG_ID" -F title="$login" | jq -r '.data.createProjectV2.projectV2.id')

              echo "Created project with ID: $NEW_PROJECT_ID"

              # Add a note to the new project with text "$id" (discussion ID)
              gh api graphql -f query='
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                    item {
                      id
                    }
                  }
                }
              ' -F projectId="$NEW_PROJECT_ID" -F contentId="$id"

              echo "Added note with discussion ID: $id to project: $login"

              # Invite the user to the project with read-write access
              gh api graphql -f query='
                mutation($organization: String!, $project: ID!, $login: String!) {
                  inviteUserToProjectV2(input: {organizationLogin: $organization, projectId: $project, permission: WRITE, invitee: {login: $login}}) {
                    projectV2Invitation {
                      id
                    }
                  }
                }
              ' -F organization="$ORG" -F project="$NEW_PROJECT_ID" -F login="$login"

              echo "Invited $login to project $login with read-write access"
            else
              echo "Project for $login already exists, skipping..."
            fi
          done < unique_messages.txt
