name: Process Enter Discussion Messages

on:
  discussion:
    types: [created]
  workflow_dispatch:

jobs:
  process-messages:
    runs-on: ubuntu-latest
    steps:
      - name: Get the discussion category ID for "Enter"
        id: fetch_category_id
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_OWNER="AdHoc-Protocol"
          REPO_NAME="AdHoc-protocol"
          
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $name: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategories(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          ' -F owner="$REPO_OWNER" -F name="$REPO_NAME" | jq -r '.data.repository.discussionCategories.nodes[] | select(.name == "Enter") | .id')
          
          echo "Fetched Category ID: $CATEGORY_ID"

      - name: Get discussion messages in "Enter" category
        id: fetch_discussions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO_OWNER="AdHoc-Protocol"
          REPO_NAME="AdHoc-protocol"
          
          MESSAGES=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                    createdAt
                    id
                  }
                }
              }
            }
          ' -F owner="$REPO_OWNER" -F name="$REPO_NAME" -F categoryId="$CATEGORY_ID")
          
          echo "$MESSAGES" > messages.json
          cat messages.json
      
      - name: Collect unique messages
        run: |
          # Parse the messages.json file and remove duplicates
          jq -r '.data.repository.discussions.nodes 
          | unique_by(.author.login) 
          | .[] 
          | "\(.author.login), \(.author.url), \(.author.avatarUrl), \(.id)"' messages.json > unique_messages.txt
          cat unique_messages.txt
      
      - name: Handle response
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Delete processed messages
          jq -r '.data.repository.discussions.nodes | .[] | .id' messages.json | while read id; do
            gh api graphql -f query='
              mutation($id: ID!) {
                deleteDiscussion(input: {id: $id}) {
                  clientMutationId
                }
              }
            ' -F id="$id"
          done

      - name: Create author-specific project
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}      
        run: |
          while IFS=, read -r author url avatar_url id; do
            # Check if project exists, if not, create it
            gh api graphql -f query='
              query($owner: String!, $name: String!) {
                repository(owner: $owner, name: $name) {
                  projects(first: 100) {
                    nodes {
                      name
                    }
                  }
                }
              }
            ' -F owner="$REPO_OWNER" -F name="$REPO_NAME" | grep -q "$author" || {
              gh api graphql -f mutation='
                mutation($name: String!) {
                  createProject(input: {name: $name}) {
                    project {
                      name
                    }
                  }
                }
              ' -F name="$author"
              
              # Add README with author details
              gh api graphql -f mutation='
                mutation($name: String!, $url: String!, $avatarUrl: String!) {
                  updateProject(input: {name: $name, body: "# [${author}](${url})  \n\n![image](${avatarUrl})\n"}) {
                    project {
                      name
                    }
                  }
                }
              ' -F name="$author" -F url="$url" -F avatarUrl="$avatar_url"
              
              # Add note with discussion ID
              gh api graphql -f mutation='
                mutation($id: String!, $author: String!) {
                  addNoteToProject(input: {projectId: $author, note: $id}) {
                    note {
                      id
                    }
                  }
                }
              ' -F id="$id" -F author="$author"
              
              # Invite the author to the project
              gh api graphql -f mutation='
                mutation($author: String!) {
                  inviteCollaborator(input: {projectId: $author, permission: READ_WRITE}) {
                    collaborator {
                      login
                    }
                  }
                }
              ' -F author="$author"
            }
          done < unique_messages.txt

