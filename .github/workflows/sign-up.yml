name: Process Sign-up Discussion Messages

on:
  discussion:
    types: [created]
  workflow_dispatch:

concurrency:
  group: "single-instance"
  cancel-in-progress: false
  
env:
  GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
  REPO: AdHoc-Protocol
  ORG: AdHoc-Protocol
  CATEGORY_SLUG: "sign-up"  # Use the correct slug format

jobs:
  process-messages:
    runs-on: ubuntu-latest
    steps:
      - name: Get Discussion Category ID for "Sign up"
        id: fetch_category_id
        run: |
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categorySlug: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategory(slug: $categorySlug) {
                  id
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categorySlug="$CATEGORY_SLUG" --jq '.data.repository.discussionCategory.id')
          
          if [[ -z "$CATEGORY_ID" ]]; then
            echo "Error: Category ID not found for '$CATEGORY_SLUG'" >&2
            exit 1
          fi
          echo "Fetched Category ID: $CATEGORY_ID"
          echo "category_id=$CATEGORY_ID" >> $GITHUB_ENV

      - name: Collect Discussion Messages in "Sign up" Category
        id: process_messages
        run: |
          MESSAGES=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                    createdAt
                    id
                  }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categoryId="$CATEGORY_ID")

          if [[ -z "$MESSAGES" ]]; then
            echo "No messages found in 'Sign up' category. Exiting..."
            exit 0
          fi

          echo "$MESSAGES" | jq -r '.data.repository.discussions.nodes 
          | unique_by(.author.login) 
          | .[] 
          | "\(.author.login), \(.author.url), \(.author.avatarUrl), \(.id)"' > unique_messages.txt
          
          echo "Collected and processed unique messages in Sign up ID:'$CATEGORY_ID' category."

      - name: Send Messages via websocat
        env:
          SIGN_UP_URL: ${{ secrets.SIGN_UP_URL }}
          SIGN_UP_HEADER: ${{ secrets.SIGN_UP_HEADER }}
        run: |
          wget -q https://github.com/vi/websocat/releases/download/v1.8.0/websocat_amd64-linux -O /usr/local/bin/websocat
          chmod +x /usr/local/bin/websocat
      
          hex_to_binary() { echo -n "$1" | xxd -r -p; }
          int_to_le_bytes() { 
            local num="$1"
            echo "Converting number to little-endian bytes: $num" >&2
            if [[ "$num" =~ ^[0-9]+$ ]]; then
              # Use printf to format each byte correctly, with zero-padding if needed
              local byte1=$(printf "%02x" $((num & 0xFF)))
              local byte2=$(printf "%02x" $(((num >> 8) & 0xFF)))
              # Combine bytes as little-endian format with explicit \x
              printf "\\x%s\\x%s" "$byte1" "$byte2"
            else
              echo "Error: Non-integer value '$num' provided to int_to_le_bytes" >&2
              exit 1
            fi
          }
      
          binary_header=$(hex_to_binary "$SIGN_UP_HEADER")
          file_size=$(stat -c%s unique_messages.txt)
          le_file_size=$(int_to_le_bytes $file_size)
      
          {
            printf "%s%s" "$binary_header" "$le_file_size"
            cat unique_messages.txt
          } | websocat --binary "$SIGN_UP_URL" | {
            if ! timeout 5 grep -q "OK"; then
              echo "Error: Failed to receive 'OK' response within 5 seconds" >&2
              exit 1
            fi
          }

      - name: Get Organization ID
        id: get_org_id
        run: |
          ORG_ID=$(gh api graphql -f query='
            query($organization: String!) {
              organization(login: $organization) {
                id
              }
            }
          ' -F organization="$ORG" --jq '.data.organization.id')
          echo "org_id=$ORG_ID" >> $GITHUB_OUTPUT

      - name: Process Unique Messages
        run: |
          while IFS=',' read -r login url avatarUrl id; do
            USER_PROJECTS=$(gh api graphql -f query='
              query($organization: String!, $login: String!) {
                organization(login: $organization) {
                  projectsV2(first: 1, query: $login) {
                    totalCount
                  }
                }
              }
            ' -F organization="$ORG" -F login="$login" --jq '.data.organization.projectsV2.totalCount')

            if [[ "$USER_PROJECTS" == "0" ]]; then
              echo "Creating new project for $login..."
              NEW_PROJECT_ID=$(gh api graphql -f query='
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {ownerId: $ownerId, title: $title}) {
                    projectV2 {
                      id
                    }
                  }
                }
              ' -F ownerId="${{ steps.get_org_id.outputs.org_id }}" -F title="$login" --jq '.data.createProjectV2.projectV2.id')

              README_CONTENT="# [$login]($url)  \n\n![image]($avatarUrl)"
              
              gh api graphql -f query='
                mutation($projectId: ID!, $readme: String!) {
                  updateProjectV2(input: {projectId: $projectId, readme: $readme, public: false}) {
                    projectV2 {
                      id
                    }
                  }
                }
              ' -F projectId="$NEW_PROJECT_ID" -F readme="$README_CONTENT"

              gh api graphql -f query='
                mutation($projectId: ID!, $title: String!) {
                  addProjectV2DraftIssue(input: {projectId: $projectId, title: $title}) {
                    clientMutationId
                  }
                }' -F projectId="$NEW_PROJECT_ID" -F title="$id"

              # Get USER_ID from GitHub API
              USER_ID=$(gh api graphql -H "X-Github-Next-Global-ID: 1" -f query='
                query($login: String!) {
                  user(login: $login) {
                    id
                  }
                }
              ' -F login="$login" --jq '.data.user.id')
              
              # Update ProjectV2 Collaborators
              gh api graphql -f query='
                mutation($projectId: ID!, $userId: ID!) {
                  updateProjectV2Collaborators(input: {
                    projectId: $projectId, 
                    collaborators: [{userId: $userId, role: READER}]
                  }) {
                    clientMutationId
                  }
                }
              ' -F projectId="$NEW_PROJECT_ID" -F userId="$USER_ID"

              echo "Invited $login to project $login with read-write access"
            else
              echo "Project for $login already exists, skipping..."
            fi
          done < unique_messages.txt

      - name: Delete Processed Messages
        if: ${{ success() }}
        run: |
          jq -r '.data.repository.discussions.nodes | .[] | .id' messages.json | while read id; do
            gh api graphql -f query='
              mutation($id: ID!) {
                deleteDiscussion(input: {id: $id}) {
                  clientMutationId
                }
              }
            ' -F id="$id"
          done
