name: Process Sign-up Discussion Messages (HTTP GET)

on:
  discussion:
    types: [ created ]
  workflow_dispatch:

concurrency:
  group: "single-instance"
  cancel-in-progress: false

env:
  GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
  REPO: AdHoc-Protocol
  ORG: AdHoc-Protocol
  CATEGORY_SLUG: "sign-up"

jobs:
  process-signups:
    runs-on: ubuntu-latest
    steps:
      - name: Get Discussion Category and Organization IDs
        id: get_ids
        run: |
          # Fetch both IDs in one API call for efficiency
          IDS_JSON=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categorySlug: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategory(slug: $categorySlug) {
                  id
                }
              }
              organization(login: $owner) {
                id
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categorySlug="$CATEGORY_SLUG")
          
          CATEGORY_ID=$(echo "$IDS_JSON" | jq -r '.data.repository.discussionCategory.id')
          ORG_ID=$(echo "$IDS_JSON" | jq -r '.data.organization.id')
          
          if [[ -z "$CATEGORY_ID" || "$CATEGORY_ID" == "null" ]]; then
            echo "Error: Category ID not found for '$CATEGORY_SLUG'" >&2
            exit 1
          fi
          
          echo "category_id=$CATEGORY_ID" >> $GITHUB_ENV
          echo "org_id=$ORG_ID" >> $GITHUB_OUTPUT
          echo "Fetched Category ID: $CATEGORY_ID"
          echo "Fetched Organization ID: $ORG_ID"

      - name: Process, Send, and Provision Each User
        env:
          SIGN_UP_URL: ${{ secrets.SIGN_UP_URL }}
          SIGN_UP_HEADER: ${{ secrets.SIGN_UP_HEADER }}
          CATEGORY_ID: ${{ env.category_id }}
          ORG_ID: ${{ steps.get_ids.outputs.org_id }}
        run: |
          # 1. Fetch all unique users who have posted in the category
          UNIQUE_USERS_JSON=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                  }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categoryId="$CATEGORY_ID" | \
          jq -c '.data.repository.discussions.nodes | unique_by(.author.login) | .[]')

          if [[ -z "$UNIQUE_USERS_JSON" ]]; then
            echo "No new sign-up discussions to process. Exiting."
            exit 0
          fi
          
          # 2. Loop through each unique user and process them completely
          echo "$UNIQUE_USERS_JSON" | while read -r user_json; do
            login=$(echo "$user_json" | jq -r '.author.login')
            url=$(echo "$user_json" | jq -r '.author.url')
            avatarUrl=$(echo "$user_json" | jq -r '.author.avatarUrl')
            
            echo "--- Processing user: $login ---"

            # 3. Get additional user data (Global ID and creation timestamp)
            USER_DATA=$(gh api graphql -H "X-Github-Next-Global-ID: 1" -f query='
              query($login: String!) {
                user(login: $login) {
                  id
                  createdAt
                }
              }
            ' -F login="$login" --jq '.data.user')
            
            user_id=$(echo "$USER_DATA" | jq -r '.id')
            created_at=$(echo "$USER_DATA" | jq -r '.createdAt')
            created_at_ms=$(date -d "$created_at" +%s%3N)
            uuid=$(uuidgen)
            
            # 4. Send user data via HTTP GET request
            echo "Sending registration request for $login..."
            http_status=$(curl -s -G \
              -w "%{http_code}" \
              -o /dev/null \
              "$SIGN_UP_URL" \
              --data-urlencode "header=$SIGN_UP_HEADER" \
              --data-urlencode "uuid=$uuid" \
              --data-urlencode "timestamp=$created_at_ms" \
              --data-urlencode "user_id=$user_id" \
              --data-urlencode "login=$login")

            if [[ "$http_status" -lt 200 || "$http_status" -ge 300 ]]; then
              echo "Error: Received non-successful HTTP status '$http_status' for user '$login'. Skipping."
              continue # Move to the next user
            fi
            
            echo "Successfully registered $login (HTTP $http_status). Now provisioning project."

            # 5. Check for and provision a GitHub Project for the user
            USER_PROJECTS=$(gh api graphql -f query='
              query($organization: String!, $login: String!) {
                organization(login: $organization) {
                  projectsV2(first: 1, query: $login) {
                    nodes { id }
                  }
                }
              }
            ' -F organization="$ORG" -F login="$login" --jq '.data.organization.projectsV2.nodes')

            if [[ "$USER_PROJECTS" == "[]" || -z "$USER_PROJECTS" ]]; then
              echo "Creating new project for $login..."
              PROJECT_ID=$(gh api graphql -f query='
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {ownerId: $ownerId, title: $title}) {
                    projectV2 { id }
                  }
                }
              ' -F ownerId="$ORG_ID" -F title="$login" --jq '.data.createProjectV2.projectV2.id')
              
              README_CONTENT="# [$login]($url)  \n\n![image]($avatarUrl)"
              
              gh api graphql -f query='
                mutation($projectId: ID!, $readme: String!) {
                  updateProjectV2(input: {projectId: $projectId, readme: $readme, public: false}) {
                    projectV2 { id }
                  }
                }
              ' -F projectId="$PROJECT_ID" -F readme="$README_CONTENT"
              
              gh api graphql -f query='
                mutation($projectId: ID!, $userId: ID!) {
                  updateProjectV2Collaborators(input: {
                    projectId: $projectId, 
                    collaborators: [{userId: $userId, role: WRITER}]
                  }) { clientMutationId }
                }
              ' -F projectId="$PROJECT_ID" -F userId="$user_id"
              echo "Invited $login to new project with read-write access."
            else
              PROJECT_ID=$(echo "$USER_PROJECTS" | jq -r '.[0].id')
              echo "Project for $login already exists. Using existing project ID: $PROJECT_ID"
            fi
            
            # 6. Add the sign-up UUID as a draft issue to their project
            gh api graphql -f query='
              mutation($projectId: ID!, $title: String!) {
                addProjectV2DraftIssue(input: {projectId: $projectId, title: $title}) {
                  clientMutationId
                }
              }' -F projectId="$PROJECT_ID" -F title="$uuid"
            echo "Added sign-up record ($uuid) to project for $login."
          done
          
      - name: Clean Up All Processed Sign-up Discussions
        if: ${{ success() }}
        env:
          CATEGORY_ID: ${{ env.category_id }}
        run: |
          echo "Cleaning up all discussions in the 'Sign up' category..."
          DISCUSSION_IDS=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes { id }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categoryId="$CATEGORY_ID" | jq -r '.data.repository.discussions.nodes[].id')
          
          for id in $DISCUSSION_IDS; do
            echo "Deleting discussion with ID: $id"
            gh api graphql -f query='
              mutation($id: ID!) {
                deleteDiscussion(input: {id: $id}) { clientMutationId }
              }
            ' -F id="$id" || echo "Warning: Failed to delete discussion with ID: $id"
            sleep 1 # Avoid hitting rate limits
          done
          echo "Cleanup complete."
