name: Process Sign-up Discussion Messages

on:
  discussion:
    types: [ created ]
  workflow_dispatch:

concurrency:
  group: "single-instance"
  cancel-in-progress: false

env:
  GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
  REPO: AdHoc-Protocol
  ORG: AdHoc-Protocol
  CATEGORY_SLUG: "sign-up"  # Use the correct slug format

jobs:
  process-messages:
    runs-on: ubuntu-latest
    steps:
      - name: Get Discussion Category ID for "Sign up"
        id: fetch_category_id
        run: |
          CATEGORY_ID=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categorySlug: String!) {
              repository(owner: $owner, name: $name) {
                discussionCategory(slug: $categorySlug) {
                  id
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categorySlug="$CATEGORY_SLUG" --jq '.data.repository.discussionCategory.id')
          
          if [[ -z "$CATEGORY_ID" ]]; then
            echo "Error: Category ID not found for '$CATEGORY_SLUG'" >&2
            exit 1
          fi
          echo "Fetched Category ID: $CATEGORY_ID"
          echo "category_id=$CATEGORY_ID" >> $GITHUB_ENV

      - name: Collect Discussion Messages in "Sign up" Category
        id: process_messages
        run: |
          MESSAGES=$(gh api graphql -f query='
            query($owner: String!, $name: String!, $categoryId: ID!) {
              repository(owner: $owner, name: $name) {
                discussions(first: 100, categoryId: $categoryId) {
                  nodes {
                    author {
                      login
                      url
                      avatarUrl
                    }
                    createdAt
                    id
                  }
                }
              }
            }
          ' -F owner="$ORG" -F name="$REPO" -F categoryId="$CATEGORY_ID")

          if [[ -z "$MESSAGES" ]]; then
            echo "No messages found in 'Sign up' category. Exiting..."
            exit 0
          fi

          echo "$MESSAGES" | jq -r '.data.repository.discussions.nodes 
            | unique_by(.author.login) 
            | .[] 
            | "\(.author.login), \(.author.url), \(.author.avatarUrl), "' | 
          while IFS= read -r line; do
          echo "${line}$(uuidgen)";
          done > unique_messages.txt
          
          echo "Collected and processed unique messages in Sign up ID:'$CATEGORY_ID' category."

      - name: Send Messages via websocat
        env:
          SIGN_UP_URL: ${{ secrets.SIGN_UP_URL }}
          SIGN_UP_HEADER: ${{ secrets.SIGN_UP_HEADER }}
          SIGN_UP_OK: ${{ secrets.SIGN_UP_OK }}
        run: |
          wget -q https://github.com/vi/websocat/releases/download/v1.8.0/websocat_amd64-linux -O /usr/local/bin/websocat
          chmod +x /usr/local/bin/websocat

          binary_header_tmp=$(mktemp) 
          echo -n "$SIGN_UP_HEADER" | xxd -r -p > "$binary_header_tmp"
          file_size=$(stat -c%s unique_messages.txt)
          printf "%02x%02x" $((file_size & 0xFF)) $((file_size >> 8 & 0xFF)) | xxd -r -p >> "$binary_header_tmp"
          cat unique_messages.txt >> "$binary_header_tmp"

          response=$(timeout 5 websocat --binary "$SIGN_UP_URL" < "$binary_header_tmp")
          if [ -z "$response" ]; then
              echo "Error: Failed to receive a response within 5 seconds" >&2
              exit 1
          fi
          
          response_hex=$(echo -n "$response" | xxd -p | tr -d '\n')
          expected_hex="${SIGN_UP_OK}"
          
          if [ "$response_hex" != "$expected_hex" ]; then
              echo "Error: Unexpected response received. Expected:$expected_hex, Got:$response_hex". >&2
              exit 1
          fi

      - name: Get Organization ID
        id: get_org_id
        run: |
          ORG_ID=$(gh api graphql -f query='
            query($organization: String!) {
              organization(login: $organization) {
                id
              }
            }
          ' -F organization="$ORG" --jq '.data.organization.id')
          echo "org_id=$ORG_ID" >> $GITHUB_OUTPUT

      - name: Process Unique Messages
        run: |
          while IFS=',' read -r login url avatarUrl id; do
            USER_PROJECTS=$(gh api graphql -f query='
              query($organization: String!, $login: String!) {
                organization(login: $organization) {
                  projectsV2(first: 1, query: $login) {
                    nodes {
                      id
                    }
                  }
                }
              }
            ' -F organization="$ORG" -F login="$login" --jq '.data.organization.projectsV2.nodes')
          
            # Check if USER_PROJECTS is empty or does not contain any projects
            if [[ "$USER_PROJECTS" == "[]" || -z "$USER_PROJECTS" ]]; then
              echo "Creating new project for $login..."
              PROJECT_ID=$(gh api graphql -f query='
                mutation($ownerId: ID!, $title: String!) {
                  createProjectV2(input: {ownerId: $ownerId, title: $title}) {
                    projectV2 {
                      id
                    }
                  }
                }
              ' -F ownerId="${{ steps.get_org_id.outputs.org_id }}" -F title="$login" --jq '.data.createProjectV2.projectV2.id')
          
              README_CONTENT="# [$login]($url)  \n\n![image]($avatarUrl)"
          
              gh api graphql -f query='
                mutation($projectId: ID!, $readme: String!) {
                  updateProjectV2(input: {projectId: $projectId, readme: $readme, public: false}) {
                    projectV2 {
                      id
                    }
                  }
                }
              ' -F projectId="$PROJECT_ID" -F readme="$README_CONTENT"
          
              # Get USER_ID from GitHub API
              USER_ID=$(gh api graphql -H "X-Github-Next-Global-ID: 1" -f query='
                query($login: String!) {
                  user(login: $login) {
                    id
                  }
                }
              ' -F login="$login" --jq '.data.user.id')
            
              # Update ProjectV2 Collaborators only if the project is newly created
              gh api graphql -f query='
                mutation($projectId: ID!, $userId: ID!) {
                  updateProjectV2Collaborators(input: {
                    projectId: $projectId, 
                    collaborators: [{userId: $userId, role: WRITER}]
                  }) {
                    clientMutationId
                  }
                }
              ' -F projectId="$PROJECT_ID" -F userId="$USER_ID"
          
              echo "Invited $login to project $login with read-write access"
            else
              # If project already exists, use the first one
              PROJECT_ID=$(echo "$USER_PROJECTS" | jq -r '.[0].id')
              if [[ "$PROJECT_ID" == "null" || -z "$PROJECT_ID" ]]; then
                echo "No valid project found for $login, skipping."
                continue
              fi
              echo "Project for $login already exists, skipping creation. Using existing project ID: $PROJECT_ID"
            fi
          
            gh api graphql -f query='
              mutation($projectId: ID!, $title: String!) {
                addProjectV2DraftIssue(input: {projectId: $projectId, title: $title}) {
                  clientMutationId
                }
              }' -F projectId="$PROJECT_ID" -F title="$id"
          
          done < unique_messages.txt

      - name: Delete Processed Messages
        if: ${{ success() }}
        env:
          CATEGORY_ID: ${{ env.category_id }}
        run: |
          while IFS=',' read -r login _; do
              echo "Fetching all messages for user: $login in category $CATEGORY_ID"
          
              # Fetch all discussion messages in the specified category
              DISCUSSIONS=$(gh api graphql -f query='
                query($repository: String!, $owner: String!, $categoryId: ID!) {
                  repository(name: $repository, owner: $owner) {
                    discussions(first: 100, categoryId: $categoryId) {
                      nodes {
                        id
                        author {
                          login
                        }
                      }
                    }
                  }
                }
              ' -F repository="$REPO" -F owner="$ORG" -F categoryId="$CATEGORY_ID")
          
              # Filter discussion IDs by the current user login
              MESSAGE_IDS=$(echo "$DISCUSSIONS" | jq -r --arg login "$login" '.data.repository.discussions.nodes | map(select(.author.login == $login)) | .[] | .id')
          
              # Delete each message by the user
              for id in $MESSAGE_IDS; do
                echo "Deleting message with ID: $id for user: $login"
                gh api graphql -f query='
                  mutation($id: ID!) {
                    deleteDiscussion(input: {id: $id}) {
                      clientMutationId
                    }
                  }
                ' -F id="$id" || echo "Failed to delete message with ID: $id for user: $login"
                sleep 1  # Optional: delay to handle rate limits
              done
          done < unique_messages.txt
